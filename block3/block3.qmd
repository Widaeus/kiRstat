---
title: "Inlämningsuppgift block 3 – tabeller, grafer, fördelningar, centrala gränssnittssatsen"
author: "Statistiska Metoder med R"
format:
  pdf:
    keep-tex: true
editor_options:
  chunk_output_type: console
knit:
  incremental: true
cache: true
echo: true
---

Försättsblad

Gruppnamn 10

Namn och personnumer på dem som deltagit aktivt:

Jacob Widaeus 950729

Hej

Denna gruppuppgift berör materialet i **ISwR kapitel 3 och 4**. Ni kommer att arbeta med funktioner som sammanfattar data i tabeller. En sport inom dataanalys är att försöka sammanfatta en stor datamängd med bara två siffror: ett centralmått och ett variationsmått. Ni får sammanfatta datamängder med olika typer av grafer. Ni kommer att undersöka fördelningar och funktioner för fördelningar i R. Varför är så många variabler normalfördelade? Här få ni testa ett argument som utgår ifrån approximation av binomialfördelningen. Det ingår även en simulering som illustrerar centrala gränssnittssatsen. **Om du inte läst så mycket statistik tidigare bör du ha Lind eller en annan bra statistikbok till hands för att få ut det mesta av gruppuppgift 3!**

Om du kör fast men någon uppgift ta hjälp av dina kurskamrater i första hand. Skulle det vara så att ni tillsammans ändå inte lyckas lösa uppgiften ta kontakt med lärare.

**Skriva tabeller**

**1.1** Ladda ISwR paketet och printa ut de fem första raderna i data.frame stroke med

```{r}
library(ISwR)
stroke[1:5,]
```

Varför står det ett ensamt komma efter 1:5?

För att markera att det gäller samtliga kolumner.

**1.2** Använd funktionen names() för att ta ut en lista på variabler i stroke
```{r}
names(stroke)
```

**1.3** Är age tillgänglig? Testa:

```{r error=TRUE}
age
```

**1.4** Använd attach för att namnen i stroke ska blir tillgängliga för R

```{r}
attach(stroke)
```

Testa igen om age är tillgänglig:

```{r}
print(age[1:20])
```

**1.5** Vad är tanken med attach egentligen? Vad finns det för fördel med att R inte automatiskt ser namnen inne i ett objekt? Och om det nu är så bra, finns det något sätt att få R att glömma namnen i ett objekt? (ISwR sid.36)

Tanken med attach är att göra variabler "direkta" i en workspace utan att behöva referera till data frame.
I större projekt där man använder många data set och frames och kanske listor underlättar namngivning etc utan attach.
detach() kan användas för att återställa variabeltillgängligheten.

**1.6** Använd tapply() för att beräkna medelvärde för variabeln age, uppdelat på patienter som varit i koma eller inte efter sin stroke.

```{r}
tapply(stroke$age, stroke$coma, mean, na.rm = TRUE)

```

**1.7** Använd tapply() för att beräkna medianålder för patienten uppdelat på olika diagnos, dgn.

```{r}
tapply(stroke$age, stroke$dgn, median, na.rm = TRUE)
```

**1.8** Använd funktionen table() för att göra en korstabell över variablerna dgn och sex i stroke

```{r}
table(stroke$sex, stroke$dgn)
```

**Använd valfria data i stroke för att skapa grafer:**

**2.1** stapeldiagram
```{r}
barplot(table(stroke$sex))
```
Stapeldiagram lämpar sig för att skildra antal i kategoriska variabler.

**2.2** histogram
```{r}
hist(stroke$age)
```
Histogram lämpar sig för att skildra antal i en kontinuerlig variabel och utvärdera fördelning i en population.

**2.3** box plot
```{r}
boxplot(stroke$obsmonths ~ stroke$dead)
```
Box plot lämpar sig bäst för att skildra intravariabel spridning i jämförelse med andra variabler.

**2.4** spridningsdiagram (scatter plot)
```{r}
plot(stroke$died, stroke$age)
```
Lämpar sig bäst för att utröna kluster, mönster och samband mellan två kontinuerliga variabler.

**2.5** cirkeldiagram
```{r}
pie(table(stroke$dgn))
```
Lämpar sig bäst för att utvärdera antalet inom olika kategoriska variabler, i jämförelse till varandra och helheten.

Förutom att redovisa din kod och klippa in den resulterande grafen vill jag att du kommenterar kort vad varje typ av graf är lämplig för att illustrera.

Kanske valde du att besvara fråga 2.1 med den enkla koden plot(table(dgn))

I så fall får du godkänt. Men om du svarat lika enkelt på alla frågor 2.1-5 så vill jag att du utforskar några möjligheter att göra en mer avancerad graf.

**3.1** Rita plot(table(dgn)) men lägg till något flärdfullt som bakgrundsfärg, titelrad, tjockare staplar.

```{r}
# Create a table of counts for the categorical variable 'dgn'
dgn_counts <- table(stroke$dgn)

# Create a bar plot with enhanced formatting
barplot(
  dgn_counts,
  main = "Fördelning av diagnoser",
  xlab = "Diagnoser",
  ylab = "Frekvens",
  col = "skyblue",
  border = "white"
)
```

**Välj, beräkna och motivera val av centralmått och spridningsmått för dessa variabler:**


**4.1** age i stroke
```{r}
age_median <- median(stroke$age)
age_iqr <- IQR(stroke$age)
age_lower <- quantile(stroke$age, 0.25)
age_upper <- quantile(stroke$age, 0.75)

hist(stroke$age)

abline(v = age_median)
abline(v = age_lower)
abline(v = age_upper)
```
Här valde jag att beräkna median och IQR på grund av vänsterskewed data.

**4.2** dgn i stroke
```{r}
plot(stroke$dgn)

print(paste("Mode av stroke$dgn är", names(sort(table(stroke$dgn), decreasing = TRUE)[1])))
```
Bästa centralmåttet av kategoriska variabler är mode.

**4.3** rnorm(10000)

Om du vet vad rnorm betyder – testa annars ?rnorm() – så är det lätt att argumentera för det rätta svaret. Men jag vill påminna här att du även kan titta på data innan du bestämmer dig. Kanske dessa metoder kan vara till nytta:
hist(rnorm(10000))
boxplot(rnorm(10000))

```{r}
data <- rnorm(10000)
hist(data)

abline(v = mean(data))
abline(v = mean(data) - sd(data))
abline(v = mean(data) + sd(data))
```

I en normalfördelad data hamnar medelvärdet centralt och spridningen kan karaktäriseras standardavvikelser. I detta fall skildrar jag detta med en vertikal linje 1 SD från medelvärdet.

**Fördelningar**

För att ha glädje av avsnittet fördelningar i inlämningsuppgiften måste du ha grunderna klara för dig. Läs i Lind eller någon anna text om diskreta och kontinuerliga fördelningar. Du kan fokusera på exemplen binomialfördelning (sid. 184-193) och normalfördelning (214-229).

**Bionomialfördelningen**

Passar för att beskriva fördelningar där man upprepar ett experimentet ett antal gånger (i R heter det size) Experimentet kan få två olika utfall, dessa brukar betecknas success och failure. Sannolikheten för success (i R heter det prob) förblir densamma vid varje nytt försök.

Exempel:
Två patienter får en behandling som har sannolikheten P(bota) = 0,7 att bota sjukdomen.

**5.1** Använd min kod nedan för att med binomialfördelningen beräkna och plotta sannolikheterna att 0 eller 1 eller 2 patienter botas. Lägg till en lämplig titel till grafen.

```{r}
x <- 0:2
plot(x, dbinom(x, 2, 0.7), type = "h", col = "red", lwd=10, main = "Binomial fördelning")
```

Det är bra att vid ett tillfälle beräkna sannolikheterna för varje utfall för hand. Formeln finner du på sid 57 i ISwR. Här följer formeln med värdena för utfallet 0 tillfrisknar ifyllda.
```{r}
n <- 2
p <- 0.7

# Beräkna sannolikheterna
prob_0 <- dbinom(0, n, p)
prob_1 <- dbinom(1, n, p)
prob_2 <- dbinom(2, n, p)

# print
print(paste("P(x=0) =", prob_0))
print(paste("P(x=1) =", prob_1))
print(paste("P(x=2) =", prob_2))
```

**5.2** Beräkna i R med formeln ovan sannolikheterna att 0 eller 1 eller 2 patienter botas, rita en graf. Använd funktionen choose(). Blev det samma resultat som i 5.1?
```{r}
# Beräkna sannolikheterna med ovan formel
prob_0 <- choose(n, 0) * p^0 * (1 - p)^(n - 0)
prob_1 <- choose(n, 1) * p^1 * (1 - p)^(n - 1)
prob_2 <- choose(n, 2) * p^2 * (1 - p)^(n - 2)

# Skapa en vektor
probs <- c(prob_0, prob_1, prob_2)

# Plot
barplot(probs, names.arg = 0:2, main = "Sannolikhet", xlab = "Antal tillfrisknade", ylab = "Sannolikhet", col = "lightblue", border = "white", ylim = c(0,0.75))
```

För att lösa uppgiften kan du behöva komplettera texten i ISwR med en annan text om binomialfördelningen. Om du har läst tidigare räcker det kanske att läsa igenom formler som jag klippt ur wikipedia binomial distribution

**5.3** Sex patienter får samma behandling. Sannolikheten att tillfriskna har visat sig vara 80%.

Rita ett stapeldiagram som visar sannolikheten för varje tänkbart utfall från noll patienter tillfrisknar till sex patienter tillfrisknar. Använd dbinom().

```{r}
# Skriver funktion då det kan itereras
prob <- function(n, p) {
  # Initiate df
  prob <- data.frame(amount = integer(), probability = numeric())
  # for loop, for every iteration calculate and append
  for (i in 1:n) {
    prob <- rbind(prob, data.frame(amount = i, probability = dbinom(i, n, p)))
  }
  return(prob)
}

# Beräkna sannolikheter
probabilities <- prob(6, 0.8)

# Plot
barplot(probabilities$probability, names.arg = probabilities$amount, ylim = c(0, 0.5))
```

**5.4** Beräkna sannolikheten att exakt två patienter tillfrisknar.
```{r}
# Det finns redan en funktion skriven

frisk_2 <- prob(2, 0.8)

print(paste("Sannolikheten att 2 patienter tillfrisknar är", frisk_2[2,2]*100,"%"))
```

**5.5** Beräkna sannolikheten att minst 5 patienter tillfrisknar.
```{r}
frisk_2 <- prob(5, 0.8)

print(paste("Sannolikheten att 5 patienter tillfrisknar är", round(frisk_2[5,2]*100),"%"))
```

**Normalfördelnigen**

Normalfördelnigen är ett mycket användbart verktyg inom statistiken.

**6.1** Rita en standardiserad normalfördelning med medelvärdet noll och standardavvikelsen ett med mitt kodförslag nedan:

x <- seq(-4,4,0.05)

plot (dnorm(x))


eller

curve(dnorm(x), from= -4, to=4)

_Funktionen dnorm(x), som i density function, returnerar sannolikheten att i ett experiment få ett ufallet x eller mycket nära x_

```{r}
x <- seq(-4,4,0.05)

plot (dnorm(x))
```

**6.2** Rita en graf som beskriver fördelningen av blodtryck i mmHg för människor. Variabeln ska vara normalfödelad med medelvärdet 90 och standardavvikelsen 10.

```{r}
hist(rnorm(100, mean=90, sd=10))
```

_Funktionen pnorm(x), som i probability function, returnerar sannolikheten att i ett experiment få ett utfall x eller lägre än x._

Använd pnorm() för att beräkna andelen människor i världsbefolkningen som har ett blodtryck:

```{r}
# Skriver en funktion då repeterande uppgift
blodtryck <- function(limit, mean, sd, hi = TRUE) {
  prob <- pnorm(limit, mean = mean, sd = sd)
  if (hi)
    prob <- (1-prob)*100
  else
    prob <- prob*100

  return(prob)
}
```

**6.3** 80 eller lägre
```{r}
print(blodtryck(80, mean=90, sd=10, hi = FALSE))
```

**6.4** 100 eller lägre
```{r}
print(blodtryck(100, mean=90, sd=10, hi = FALSE))
```

**6.5** högre än 100
```{r}
print(blodtryck(100, mean=90, sd=10, hi = TRUE))
```

**6.6** högre än 90 (stanna till här och tänk efter om resultatet för 6.6 verkar stämma, kommentera)
```{r}
print(blodtryck(90, mean=90, sd=10, hi = TRUE))
```
Eftersom medelvärdet av normalfördelning ska vara 90 bör då 50% vara över 90.

**6.7** Av 50000 svenska män födda 1980, hur många är 190 cm eller längre? Utgå ifrån medellängd 180 cm och standardavvikelse 7 cm. (Värdena är påhittade.)
```{r}
print((1-pnorm(190, mean = 180, sd = 7)))
```

**6.8** Hur många män födda 1980 är mellan 180 och 190 cm långa?
```{r}
print(pnorm(190, mean = 180, sd = 7) - pnorm(180, mean = 180, sd = 7))
```

_Funktionen qnorm(), som i quantile function, kan du använda om du söker ett värde för en normalfördelad variabel som är högre eller lika med en viss andel av alla observationer._

Nedan har jag använt qnorm() för att beräkna det intervall av blodtryck som innesluter 95% av befolkningen.

\> qnorm(c(0.025, 0.975), 90, 10)

\[1\] 70.40036 109.59964

**6.9** Justera min kod så att R returnerar blodtrycksintervallet angett i heltal.
```{r}
round(qnorm(c(0.025, 0.975), 90, 10))
```

Nedan har jag ritat en graf som visar fördelningen av blodtryck i befolkningen. Medel 90 mmHg, standardavvikelse 10. Dessutom har jag ritat in gränserna som innesluter 95% av befolkningen.

**6.10** Återskapa min graf med R kod.

```{r}
# Definierar punkter
x <- seq(60, 120, 0.1)

# Beräknar värden
blodtryck <- dnorm(x, mean = 90, sd = 10)

ci <- round(qnorm(c(0.025, 0.975), 90, 10))

# Plot
plot(x, blodtryck, type = "l", xlab = "X", ylab = "dnorm(x,90,10)", lwd = 2)
segments(ci[1], 0, ci[1], dnorm(ci[1], mean = 90, sd = 10), lwd = 2, lty = 2)
segments(ci[2], 0, ci[2], dnorm(ci[2], mean = 90, sd = 10), lwd = 2, lty = 2)
```

Den sortens beräkningar du har gjort med normalfördelningen är mycket vanliga. Därför finns så kallade z-tabeller publicerade. De anger ofta sannolikheten, p , att få ett utfall z eller lägre än z, där z är normalfördelad med medelvärdet 0 och standardavvikelsen 1.

Testa att googla z table och titta på bildresultaten, så hittar du z-tabeller i olika utformningar.

Du kan använda länken nedan om du vill, men lova då att klura på hur adressen är utformad, det kan du ha glädje av någon annan gång när du hämtar sidor automatiskt.

<https://www.google.com/search?q=z+table>

**6.11** Skriv några rader i R som skapar en kolumn med p-värden, från z= -4 till z = 0
Välj ett antal värdesiffror som du tycker verkar vara vanligt i z-tabeller. Vi bryr oss inte om smärre avvikelser i avrundning.

```{r}
# Z och P värden
z <- seq(-4, 0, by = 1)
p_values <- pnorm(z)

# Skapa df
p_values_df <- data.frame(z = z, p_values = round(p_values, 4))

print(p_values_df)
```

**Varför är normalfördelningen användbar?**

Nu har du räknat ett antal exempel med normalfördelningen. Men varför är normalfördelningen så användbar egentligen? Jag vill att du gör två experiment som illustrerar varför vi har stor glädje av denna fördelning. Det första utgår ifrån ett resonemang om biologi och binomialfördelningen, det andra är mer matematiskt och handlar om centrala gränsvärdessatsen.

Många fenomen i naturen beror på ett stort antal underliggande faktorer som är oberoende av varandra. Ofta duger det bra att anta oberoende även i fall där det finns små kopplingar mellan faktorer. Tänk till exempel att du ska skapa detaljerad modell av kroppslängd. Troligen kan du hitta påverkan från ett stort antal gener, vi kan gissa på 200. Dessutom kan du säkert hitta ett så stort antal yttre faktorer att det verkar rimligt att klassa dem som oberoende för vårt resonemang. Mammas nutritionstillstånd under graviditeten. Mamma rökte eller ej. Min poäng här är bara att listan kan göras lång.

Tänk dig en biologisk variabel x. Du kan simulera ett värde för x genom att singla slant ett antal gånger och lägga samman resultatet: varje krona ger 1 poäng, varje klave ger 0 poäng. Använd binomialfördelningen för att se hur x fördelas i popultaionen om variabeln styrs av två underliggande faktorer. (7.1)

Jämförelsen haltar något, eftersom vi inte har med koncepten recessiv och dominant i vår enkla modell, men för att konkretisera kan du tänka dig en enklare egenskap som ögonfärg. Mycket förenklat kan den anta några få olika lägen: blå, grön, brun. Och den styrs av få underliggande faktorer: ett par gener.

**7.1** Rita upp binomialfördelningen för att singla slant två ggr med följande kod.

Rita in en normalfördelning i samma graf.
```{r}
x <- 0:2
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))

mean <- 2 * 0.5
sd <- sqrt(2 * 0.5 * 0.5)

x_norm <- seq(-1, 3, length.out = 100)
norm_y <- dnorm(x_norm, mean, sd)

lines(x_norm, norm_y, col = "red", lwd = 2)
```

**7.2** Rita nu upp en variabel som styrs av 8 underliggande oberoende faktorer
Rita in en normalfördelning i samma graf.
```{r}
# Variabler
n <- 10000
factors <- replicate(8, rnorm(n))
variable <- rowSums(factors)

# Plot the histogram of the variable
hist(variable, breaks = 50, probability = TRUE)

# Overlay a normal distribution curve
x <- seq(min(variable), max(variable), length = 100)
y <- dnorm(x, mean = mean(variable), sd = sd(variable))
lines(x, y, col = "red", lwd = 2)
```

**7.3** Rita nu upp en variabel som styrs av 30 underliggande oberoende faktorer
Rita in en normalfördelning i samma graf.
```{r}
# Variabler
n <- 10000
factors <- replicate(30, rnorm(n))
variable <- rowSums(factors)

# Plot
hist(variable, breaks = 50, probability = TRUE)

# Overlay
x <- seq(min(variable), max(variable), length = 100)
y <- dnorm(x, mean = mean(variable), sd = sd(variable))
lines(x, y, col = "red", lwd = 2)
```

**7.4** Kommentera resultatet av undersökningen 7.1 till 7.3
Även summerade variabler beroende på 8 och 30 faktorer uppvisar normal distribution, oavsett fördelning på underliggande faktorer.
Det innebär även att vi kan anta att variabler som påverkas av underliggande faktorer uppvisar normal distribution, oavsett dess underliggande distribution.

**Frivillig uppgift**: Det finns ett elegant sätt att välja standardavvikelse för normalfördelningen som du ritar in över binomialfördelningen i graferna. Hur kan man beräkna ett lämpligt värde? Tips: Läs Lind formel \[6-5\]

**Centrala gränsvärdessatsen (Central Limit theorem)**

Att annat skäl till att normalfördelningen är så användbar inom statistiken följer av centrala gränsvärdessatsen. Tänk att du drar många lika stora stickprov ur en population och varje gång beräknar stickprovets medelvärde. Vi ska nu undersöka hur stickprovets medelvärde fördelas.

**8.1** Skapa ett antal fördelningar NORM, UNIF, SKEV med koden nedan
Använd gruppens nummer som seed, tex grupp A = seed(1), grpp B, seed(2)

```{r}
set.seed(10)
NORM <- rnorm(10000)
UNIF <- runif(10000)
SKEV <- rep(1:100, 1:100)
```

**8.2** Rita histogram över fördelningarna och beräkna medelvärde och standardavvikelse (även om man kan ifrågasätta iden att räkna medel och standardavvikelse för SKEV)
```{r}
hist(NORM)
abline(v = mean(NORM), col = "red", lwd = 2, lty = 2)
abline(v = mean(NORM) + sd(NORM), col = "blue", lwd = 2, lty = 2)
abline(v = mean(NORM) - sd(NORM), col = "blue", lwd = 2, lty = 2)

hist(UNIF)
abline(v = mean(UNIF), col = "red", lwd = 2, lty = 2)
abline(v = mean(UNIF) + sd(UNIF), col = "blue", lwd = 2, lty = 2)
abline(v = mean(UNIF) - sd(UNIF), col = "blue", lwd = 2, lty = 2) 

hist(SKEV)
abline(v = mean(SKEV), col = "red", lwd = 2, lty = 2)
abline(v = mean(SKEV) + sd(SKEV), col = "blue", lwd = 2, lty = 2)
abline(v = mean(SKEV) - sd(SKEV), col = "blue", lwd = 2, lty = 2)
```

**8.3** Börja arbeta med NORM. Tag ur NORM 1000 stickprov med återläggning av storleken n=3, tag sedan 1000 stickprov av storleken n=6, tag slutligen 1000 stickprov av storleken n=300.
```{r}
# Funktion för plotting
plot_sample_means <- function(data, sample_sizes, num_samples) {
  # Nestad funktion för att beräkna medelvärde och sd
  sample_means <- function(data, sample_size, num_samples) {
    means <- numeric(num_samples)
    for (i in 1:num_samples) {
      sample <- sample(data, sample_size, replace = TRUE)
      means[i] <- mean(sample)
    }
    return(means)
  }
  
  par(mfrow = c(length(sample_sizes), 1))  # Set up the plotting area
  
  for (n in sample_sizes) {
    means <- sample_means(data, n, num_samples)
    hist(means, main = paste("(n =", n, ")"))
    abline(v = mean(means), col = "red", lwd = 2, lty = 2)
    abline(v = mean(means) + sd(means), col = "blue", lwd = 2, lty = 2)
    abline(v = mean(means) - sd(means), col = "blue", lwd = 2, lty = 2)
  }
  
  par(mfrow = c(1, 1))  # Reset plotting area
}

sample_sizes <- c(3, 6, 300)
num_samples <- 1000
```
```{r, fig.height=10, fig.width=10}
plot_sample_means(NORM, sample_sizes, num_samples)
```

Beräkna medelvärde för varje stickprov och rita histogram över medelvärdena (du har gjort en empirisk samplingsfördelning). Beräkna medelvärdet och standardavvikelsen för dina samplingsfördelningar n=3, n=6, n=300 .

**8.4** Upprepa uppgift 8.3 med UNIF och till sist med SKEV

```{r, fig.height=10, fig.width=10}
plot_sample_means(UNIF, sample_sizes, num_samples)
```

```{r, fig.height=10, fig.width=10}
plot_sample_means(SKEV, sample_sizes, num_samples)
```

**8.5** Formulera centrala gränsvärdessatsen (CGS), citera gärna ur en bok (tex Lind) eller från internet. Kommentera resultatet i 8.2 till 8.4 med hjälp av CGS.

För NORM (normalfördelning):
Provmitten är normalfördelade, vilket är väntat eftersom den ursprungliga fördelningen är normal.

För UNIF (uniform fördelning):
Trots att den ursprungliga fördelningen är uniform närmar sig fördelningen av provmedelvärdena en normalfördelning när provstorleken ökar. Detta visar på den centrala gränsvärdessatsen, som säger att provmedelvärdena kommer att vara normalfördelade oavsett den ursprungliga fördelningen.

För SKEV (skev fördelning):
Även om den ursprungliga fördelningen är skev blir fördelningen av provmedelvärdena ungefär normal när provstorleken ökar. Detta illustrerar återigen den centrala gränsvärdessatsen, som visar att provmedelvärdena tenderar att vara normalfördelade oavsett skevheten i den ursprungliga fördelningen.